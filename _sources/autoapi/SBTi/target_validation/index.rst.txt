:mod:`SBTi.target_validation`
=============================

.. py:module:: SBTi.target_validation


Module Contents
---------------


.. py:class:: TargetValidation(data: pd.DataFrame, company_data: pd.DataFrame, config: Type[PortfolioAggregationConfig] = PortfolioAggregationConfig)

   This class validates the targets, to make sure that only active, useful targets are considered.

   :param data: The target related data
   :param company_data: The company related data
   :param config: A Portfolio aggregation config

   .. method:: target_validation(self)


      Runs the target validation protocol.

      :return: A data frame with only valid targets, combined with the company-specific data. This will return a 9-box grid for all companies (i.e. one row for the three time-frame (short, mid, long) and the three scopes (s1s2, s3, s1s2s3). These rows might have empty targets.


   .. method:: test_end_year(self)


      Records that have a valid end_year will be returned. A valid end_year is defined as a year that is greater then
      the start_year.

      :return: a dataframe containing records that have correct end_year feature.


   .. method:: test_missing_fields(self, data_set, required_columns: List[str])


      When a required field is missing (that we need to do calculations later on), we'll delete the whole row.

      :param data_set: The data set that should be tested for missing columns.
      :param required_columns: The columns that should be in the input data
      :return: The input data set, without the invalid rows


   .. method:: test_target_type(self)


      Test on target type and only allow only GHG emission reduction targets (absolute or intensity based).

      Target validation step 1: target type #64
      If target type is Absolute => continue
      If target type is Intensity =>
      -- If Intensity_metric is Other (or none is specified) => Invalid target
      -- For all other intensity_metrics => continue
      If target type is Other (or none is specified) => Invalid target


   .. method:: test_boundary_coverage(self)


      Test on boundary coverage:

      Option 1: minimal coverage threshold
      For S1+S2 targets: coverage% must be above 95%, for S3 targets coverage must be above 67%

      Option 2: weighted coverage
      Thresholds are still 95% and 67%, target is always valid. Below threshold ambition is scaled.*
      New target ambition = input target ambition * coverage
      *either here or in tem score module

      Option 3: default coverage
      Target is always valid, % uncovered is given default score in temperature score module.


   .. method:: test_target_process(self)


      Test on target process
      If target process is 100%, the target is invalid (only forward looking targets allowed)
      Output: a list of valid targets per company

      Target progress: the percentage of the target already achieved


   .. method:: convert_s1_s2_into_s1s2(self)


      Combine all s1 and a s2 targets into one s1s2 target.

      :return:


   .. method:: split_s1s2s3(self)


      If there is a s1s2s3 scope, split it into two targets with s1s2 and s3


   .. method:: time_frame(self)


      Time frame is forward looking: target year - current year. Less than 5y = short, between 5 and 15 is mid, 15 to 30 is long


   .. method:: _find_target(self, row: pd.Series, target_columns: List[str])


      Find the target that corresponds to a given row. If there are multiple targets available, filter them.

      :param row: The row from the data set that should be looked for
      :param target_columns: The columns that need to be returned
      :return: returns records from the input data, which contains company and target information, that meet specific criteria. For example, record of greatest emissions_in_scope


   .. method:: group_targets(self)


      Group the targets and create the 6 field grid (short, mid, long * s1s2, s3).
      Group valid targets by category & filter multiple targets#
      Input: a list of valid targets for each company:
      For each company:

      Group all valid targets based on scope (S1+S2 / S3) and time frame (short / mid / long-term) into 6 categories.

      For each category: if more than 1 target is available, filter based on the following criteria
      -- Highest boundary coverage
      -- Latest base year
      -- Target type: Absolute over intensity
      -- If all else is equal: average the ambition of targets


   .. method:: combine_records(self)


      Combines both data frames together. The company_data and the portfolio data that filtered out companies.

      :return: The combined data frame



