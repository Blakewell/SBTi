{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/app.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAyC;AACc;;;AAGvD,MAAM,MAAM,GAAW,EAAE,CAAC;AAMnB,MAAM,gBAAgB;;+FAAhB,gBAAgB;0JAAhB,gBAAgB,kBAHlB,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC7B,4DAAY;mIAEX,gBAAgB,uFAFjB,4DAAY;6FAEX,gBAAgB;cAJ5B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;;;;;ICqC9C,oEACI;IAAA,gFAAsD;IAAvB,yVAAsB;IAAC,uDAAmB;IAAA,4DAAY;IACzF,4DAAI;;;IADW,0DAAmB;IAAnB,+EAAmB;IAAwB,0DAAmB;IAAnB,iFAAmB;;;IAmBjE,oEACI;IAAA,uEACJ;IAAA,4DAAI;;;IAD4B,0DAAkB;IAAlB,wFAAkB;;;IAO1C,yEAA4D;IAAA,uDAAgB;IAAA,4DAAS;;;IAAzB,0DAAgB;IAAhB,iFAAgB;;;;IAHpF,oEACI;IAAA,6EACI;IADsD,0YAAmC;IACzF,oEAAiB;IACjB,0HAA4D;IAChE,4DAAS;IACb,4DAAI;;;;IAJ6B,0DAA4B;IAA5B,2GAA4B;IAAC,sGAAmC;IAEjF,0DAAmD;IAAnD,mGAAmD;;;IAV3E,0EACI;IAAA,0EACI;IAAA,4GACI;IAER,4DAAM;IACN,0EACI;IAAA,4GACI;IAKR,4DAAM;IACV,4DAAM;;;IAZK,0DAA8B;IAA9B,mFAA8B;IAK9B,0DAA8B;IAA9B,mFAA8B;;;IAsBjC,yEAAsE;IAAA,uDAAqB;IAAA,4DAAS;;;IAA9B,0DAAqB;IAArB,sFAAqB;;;IAO3F,yEAAsD;IAAA,uDAAa;IAAA,4DAAS;;;IAAtB,0DAAa;IAAb,8EAAa;;;IAOnE,yEAA+D;IAAA,uDAAiB;IAAA,4DAAS;;;IAA1B,0DAAiB;IAAjB,kFAAiB;;;IAOhF,yEAAmD;IAAA,uDAAqB;IAAA,4DAAS;;;IAA9B,0DAAqB;IAArB,sFAAqB;;;IAMxE,yEAAyD;IAAA,uDAAmB;IAAA,4DAAS;;;IAA5B,0DAAmB;IAAnB,oFAAmB;;;IAQpF,0EACI;IAAA,0EACI;IAAA,0EACI;IAAA,0EACI;IAAA,uEACJ;IAAA,4DAAM;IACN,0EACI;IAAA,yEAAuB;IAAA,uDAAiD;;IAAA,4DAAK;IACjF,4DAAM;IACV,4DAAM;IACV,4DAAM;IACN,0EACI;IAAA,2EACI;IAAA,2EACI;IAAA,sEACJ;IAAA,4DAAM;IACN,2EACI;IAAA,0EAAuB;IAAA,wDAA+C;;IAAA,4DAAK;IAC/E,4DAAM;IACV,4DAAM;IACV,4DAAM;IACN,2EACI;IAAA,2EACI;IAAA,2EACI;IAAA,uEACJ;IAAA,4DAAM;IACN,2EACI;IAAA,0EAAuB;IAAA,wDAAgD;;IAAA,4DAAK;IAChF,4DAAM;IACV,4DAAM;IACV,4DAAM;IACV,4DAAM;;;IAxBiC,0DAAiD;IAAjD,wLAAiD;IAUjD,0DAA+C;IAA/C,uLAA+C;IAU/C,0DAAgD;IAAhD,wLAAgD;;;IAYvE,yEAA2D;IAAA,uDAAgB;IAAA,4DAAK;;;IAArB,0DAAgB;IAAhB,iFAAgB;;;IAK3E,yEAA2D;IAAA,uDAA0B;IAAA,4DAAK;;;;IAA/B,0DAA0B;IAA1B,6FAA0B;;;IADzF,qEACI;IAAA,oHAA2D;IAC/D,4DAAK;;;IADe,0DAA0C;IAA1C,0FAA0C;;;;IA7C9E,0EACI;IAAA,kHACI;IAgCJ,0EACI;IAAA,qEAAI;IAAA,qFAA0B;IAAA,6EACA;IAAtB,oTAAqB;IAAC,mEAAQ;IAAA,4DAAS;IAAA,4DAAK;IACpD,4EACI;IAAA,wEACI;IAAA,qEACI;IAAA,gHAA2D;IAC/D,4DAAK;IACT,4DAAQ;IACR,yEACI;IAAA,gHACI;IAER,4DAAQ;IACZ,4DAAQ;IACZ,4DAAM;IACV,4DAAM;;;IAjDe,0DAA+B;IAA/B,yEAA+B;IAuChB,0DAA0C;IAA1C,yFAA0C;IAI1D,0DAAoC;IAApC,yFAAoC;;ADxJrD,MAAM,YAAY;IA6BrB,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QA5B1C,UAAK,GAAG,wBAAwB,CAAC;QACjC,kBAAa,GAAW,CAAC,CAAC;QAC1B,sBAAiB,GAAY,IAAI,CAAC;QAClC,2BAAsB,GAAa,CAAC,YAAY,EAAE,cAAc,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;QAC1G,wBAAmB,GAAa,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QACzD,6BAAwB,GAAa,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC9D,gCAA2B,GAAa,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QAC1F,qBAAgB,GAAa,CAAC,YAAY,EAAE,UAAU,EAAE,gBAAgB,EAAE,cAAc,EAAE,kBAAkB;YACxG,YAAY,EAAE,kBAAkB,EAAE,0BAA0B,EAAE,sBAAsB,EAAE,sBAAsB;YAC5G,yBAAyB,EAAE,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,aAAa,EAAE,0BAA0B;YACxG,oBAAoB,EAAE,oBAAoB,CAAC,CAAC;QAChD,8BAAyB,GAAW,IAAI,CAAC;QACzC,qBAAgB,GAAa,EAAE,CAAC;QAChC,wBAAmB,GAAa,EAAE,CAAC;QACnC,mBAAc,GAAa,EAAE,CAAC;QAC9B,0BAAqB,GAAa,EAAE,CAAC;QACrC,iBAAY,GAAW,GAAG,CAAC;QAG3B,cAAS,GAAa,EAAE,CAAC;QACzB,YAAO,GAAa,EAAE,CAAC;QACvB,kBAAa,GAA8B,EAAE,CAAC;QAC9C,kBAAa,GAAa,EAAE,CAAC;QAC7B,kBAAa,GAAa,EAAE,CAAC;QAC7B,iBAAY,GAA8B,EAAE,CAAC;QAC7C,WAAM,GAAY,EAAE,CAAC;IAGyB,CAAC;IAE/C,QAAQ;QACJ,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzD,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC5B,CAAC;IAED,QAAQ,CAAC,KAAY;QACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,KAAY;QACd,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;IACtD,CAAC;IAED,UAAU,CAAC,OAAO;QACd,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;IAC9C,CAAC;IAED,gBAAgB;QACZ,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE;aAC7B,SAAS,CAAC,aAAa,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC,CAAC;IACxE,CAAC;IAED,WAAW,CAAC,QAAgB,EAAE,IAAuB;QACjD;;;;WAIG;QACH,IAAI,UAAU,GAAG,UAAU,GAAG;YAC1B,IAAI,QAAQ,GAAG,EAAE,CAAC;YAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACjC,IAAI,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;gBAC1D,IAAI,GAAG,CAAC,CAAC,CAAC,YAAY,IAAI,EAAE;oBACxB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC;iBACxC;gBAAA,CAAC;gBACF,IAAI,MAAM,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAC5C,IAAI,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC;oBAC/B,MAAM,GAAG,GAAG,GAAG,MAAM,GAAG,GAAG,CAAC;gBAChC,IAAI,CAAC,GAAG,CAAC;oBACL,QAAQ,IAAI,GAAG,CAAC;gBACpB,QAAQ,IAAI,MAAM,CAAC;aACtB;YACD,OAAO,QAAQ,GAAG,IAAI,CAAC;QAC3B,CAAC,CAAC;QAEF,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SAClC;QAED,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,EAAE,yBAAyB,EAAE,CAAC,CAAC;QACpE,IAAI,SAAS,CAAC,UAAU,EAAE,EAAE,SAAS;YACjC,SAAS,CAAC,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;SACxC;aAAM;YACH,IAAI,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YACvC,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,EAAE,EAAE,oBAAoB;gBACnD,iDAAiD;gBACjD,IAAI,GAAG,GAAG,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;gBACpC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBAC/B,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;gBACxC,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC;gBACjC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBAChC,IAAI,CAAC,KAAK,EAAE,CAAC;gBACb,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;aACnC;SACJ;IACL,CAAC;IAED,UAAU;QACN,IAAI,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QAC9B,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAC3E,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;QAE3D,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC9D,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC;YACvC,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC3B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,GAAG,EAAE,GAAG;oBACvD,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;oBAChB,OAAO,GAAG,CAAC;gBACf,CAAC,EAAE,EAAE,CAAC,CAAC;aACV;QACL,CAAC,CAAC;IACN,CAAC;IAED,SAAS;QACL,IAAI,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5D,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAChC,IAAI,CAAC,WAAW,CAAC,wBAAwB,EAAE,GAAG,CAAC,CAAC;IACpD,CAAC;IAED,QAAQ,CAAC,CAAC;QACN,IAAI,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,CAAC;QACrG,IAAI,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YAC3C,IAAI,MAAM,GAAG,EAAE,CAAC;YAChB,KAAK,IAAI,MAAM,IAAI,YAAY,EAAE;gBAC7B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;aACpD;YACD,OAAO,MAAM,CAAC;QAClB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC;YAChC,oBAAoB,EAAE,IAAI,CAAC,yBAAyB;YACpD,gBAAgB,EAAE,IAAI,CAAC,qBAAqB;YAC5C,uBAAuB,EAAE,IAAI,CAAC,mBAAmB;YACjD,mBAAmB,EAAE,IAAI,CAAC,gBAAgB;YAC1C,iBAAiB,EAAE,IAAI,CAAC,cAAc;YACtC,eAAe,EAAE,IAAI,CAAC,YAAY;YAClC,WAAW,EAAE,aAAa;SAC7B,CAAC;aACG,SAAS,CAAC,CAAC,QAAQ,EAAE,EAAE;YACpB,IAAI,QAAQ,KAAK,SAAS,EAAE;gBACxB,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,mBAAmB,CAAC,CAAC;gBAClD,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC;gBAC3C,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC/B,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC3D;aACJ;QACL,CAAC,CAAC;IACV,CAAC;;wEArJQ,YAAY;4FAAZ,YAAY;;QCMzB,yEACI;QAAA,uEAAiC;QAAA,+DAAI;QAAA,4DAAI;QACzC,4EAGI;QAHsD,sLAAgD;QAGtG,qEAAyC;QAC7C,4DAAS;QACT,yEACI;QAAA,wEACI;QAAA,wEACI;QAAA,uEAA6D;QAAA,4EAAiB;QAAA,4DAAI;QACtF,4DAAK;QACL,yEACI;QAAA,wEAA8D;QAAA,8EAAkB;QAAA,4DAAI;QACxF,4DAAK;QACT,4DAAK;QACT,4DAAM;QACV,4DAAM;QAEN,0EACI;QAAA,sEAAI;QAAA,oFAAwB;QAAA,4DAAK;QACjC,uGACI;QAGJ,wEACI;QAAA,2EACI;QAAA,6EAA8B;QAAA,sEAAU;QAAA,4DAAQ;QAChD,6EAEJ;QAFW,4IAAU,sBAAkB,IAAC;QAApC,4DAEJ;QAAA,4DAAM;QACN,2EACI;QAAA,6EAAkC;QAAA,qEAAS;QAAA,4DAAQ;QACnD,6EAEJ;QADQ,wLAA2B;QAD/B,4DAEJ;QAAA,4DAAM;QACN,8EAAuD;QAAvB,qIAAS,gBAAY,IAAC;QAAC,uEAAW;QAAA,4DAAS;QAC3E,iEACA;QAAA,sEAAI;QAAA,4FAAgC;QAAA,4DAAK;QACzC,2GACI;QAcR,4DAAO;QACP,gFACI;QADE,uRAAY,iBAAW,IAAC;QAC1B,iEACA;QAAA,sEAAI;QAAA,0GAA8C;QAAA,4DAAK;QAEvD,2EACI;QAAA,6EAAgC;QAAA,qFAAyB;QAAA,4DAAQ;QACjE,6EAEJ;QADQ,uLAA0B;QAD9B,4DAEJ;QAAA,4DAAM;QACN,2EACI;QAAA,6EAAqC;QAAA,8EAAkB;QAAA,4DAAQ;QAC/D,8EAEI;QAFyB,qMAAuC;QAEhE,iHAAsE;QAC1E,4DAAS;QACb,4DAAM;QACN,2EACI;QAAA,6EAAoC;QAAA,sEAAU;QAAA,4DAAQ;QACtD,8EAEI;QAFI,4LAA8B;QAElC,iHAAsD;QAC1D,4DAAS;QACb,4DAAM;QACN,2EACI;QAAA,6EAAuC;QAAA,iEAAK;QAAA,4DAAQ;QACpD,8EAEI;QAFI,+LAAiC;QAErC,iHAA+D;QACnE,4DAAS;QACb,4DAAM;QACN,2EACI;QAAA,6EAAiC;QAAA,4EAAgB;QAAA,4DAAQ;QACzD,8EAEI;QADA,iMAAmC;QACnC,iHAAmD;QACvD,4DAAS;QACb,4DAAM;QACN,2EACI;QAAA,6EAAqB;QAAA,mEAAO;QAAA,4DAAQ;QACpC,8EACI;QADqD,0LAA4B;QACjF,iHAAyD;QAC7D,4DAAS;QACb,4DAAM;QAEN,8EAAgC;QAAA,iFAAqB;QAAA,4DAAS;QAClE,4DAAO;QAEP,4GACI;QAmDR,4DAAM;QAEN,4EAA+B;;QArJtB,0DAAiC;QAAjC,8FAAiC;QAcnC,2DAA4B;QAA5B,+EAA4B;QAanB,0DAA2B;QAA3B,sFAA2B;QAKlB,0DAA0B;QAA1B,wFAA0B;QAuBnC,0DAA0B;QAA1B,qFAA0B;QAID,0DAAuC;QAAvC,kGAAuC;QAExD,0DAA6D;QAA7D,oGAA6D;QAKjE,0DAA8B;QAA9B,yFAA8B;QAE1B,0DAA6C;QAA7C,4FAA6C;QAKjD,0DAAiC;QAAjC,4FAAiC;QAE7B,0DAAsD;QAAtD,iGAAsD;QAM9D,0DAAmC;QAAnC,8FAAmC;QAC3B,0DAA0C;QAA1C,sFAA0C;QAKG,0DAA4B;QAA5B,uFAA4B;QACzE,0DAAgD;QAAhD,yFAAgD;QAOpB,0DAAgC;QAAhC,8FAAgC;;6FD5GvE,YAAY;cALxB,uDAAS;eAAC;gBACP,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,qBAAqB,CAAC;aACrC;;;;;;;;;;;;;;AETD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACjB;AACI;AACc;AAEH;AACT;AACQ;;AAgBhD,MAAM,SAAS;;wFAAT,SAAS,cAFR,2DAAY;4IAEb,SAAS,mBAHT,EAAE,YAPJ;YACP,uEAAa;YACb,oEAAgB;YAChB,oEAAS;YACT,qEAAgB;YAChB,0DAAW;SACZ;mIAIU,SAAS,mBAZlB,2DAAY,aAGZ,uEAAa;QACb,oEAAgB;QAChB,oEAAS;QACT,qEAAgB;QAChB,0DAAW;6FAKF,SAAS;cAdrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,2DAAY;iBACb;gBACD,OAAO,EAAE;oBACP,uEAAa;oBACb,oEAAgB;oBAChB,oEAAS;oBACT,qEAAgB;oBAChB,0DAAW;iBACZ;gBACD,SAAS,EAAE,EAAE;gBACb,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC1B;;;;;;;;;;;;;;ACtBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACoB;AACH;AAEtB;AACW;;;AAU1C,MAAM,UAAU;IAOnB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QALpC,gBAAW,GAAG;YACV,OAAO,EAAE,IAAI,gEAAW,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC;SACnE,CAAC;IAGsC,CAAC;IAEzC,QAAQ,CAAC,KAAY;QACjB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACvB,CAAC;IAED,eAAe,CAAC,QAAgC;QAC5C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAED,6CAA6C;IACtC,gBAAgB;QACnB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAiB,GAAG,qEAAW,CAAC,IAAI,iBAAiB,CAAC;aACrE,IAAI,CACD,0DAAG,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,EAC/C,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAiB,kBAAkB,EAAE,EAAE,CAAC,CAAC,CACvE,CAAC;IACV,CAAC;IAEM,gBAAgB,CAAC,IAAc;QAClC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAY,GAAG,qEAAW,CAAC,IAAI,mBAAmB,EAAE,IAAI,CAAC;aACzE,IAAI,CACD,0DAAG,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,EACzC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAY,kBAAkB,EAAE,EAAC,WAAW,EAAE,EAAE,EAAC,CAAC,CAAC,CACjF,CAAC;IACV,CAAC;IAEM,mBAAmB,CAAC,IAA8B;QACrD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAyB,GAAG,qEAAW,CAAC,IAAI,qBAAqB,EAAE,IAAI,CAAC;aACxF,IAAI,CACD,0DAAG,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC,EACrD,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAyB,qBAAqB,EAAE,EAAC,mBAAmB,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAC,CAAC,CAAC,CAC1H,CAAC;IACV,CAAC;IAED;;;;;OAKG;IACK,WAAW,CAAI,SAAS,GAAG,WAAW,EAAE,MAAU;QACtD,OAAO,CAAC,KAAU,EAAiB,EAAE;YAEjC,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,EAAE;gBACtB,IAAI,CAAC,QAAQ,CAAC,EAAC,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,wDAAwD,EAAC,CAAC,CAAC;aACvG;iBAAM;gBACH,IAAI,CAAC,QAAQ,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,2BAA2B,EAAC,CAAC,CAAC;gBACtE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,yBAAyB;aAClD;YAED,yDAAyD;YACzD,OAAO,+CAAE,CAAC,MAAW,CAAC,CAAC;QAC3B,CAAC,CAAC;IACN,CAAC;;oEA7DQ,UAAU;6FAAV,UAAU,WAAV,UAAU,mBADG,MAAM;6FACnB,UAAU;cADtB,wDAAU;eAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;;;;;;;;;;;;ACdlC;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,uBAAuB;CAC9B,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;AChBnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AppService } from './app.service';\r\nimport { DataProvider } from './dataProvider';\r\nimport { Alert } from './alert';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n    title = 'SBTi Temperature score';\r\n    excelSkiprows: number = 0;\r\n    isNavbarCollapsed: boolean = true;\r\n    availableTargetColumns: string[] = [\"company_id\", \"company_name\", \"portfolio_weight\", \"investment_value\"];\r\n    availableTimeFrames: string[] = [\"short\", \"mid\", \"long\"];\r\n    availableScopeCategories: string[] = [\"s1s2\", \"s3\", \"s1s2s3\"];\r\n    availableAggregationMethods: string[] = [\"WATS\", \"TETS\", \"MOTS\", \"EOTS\", \"ECOTS\", \"AOTS\"];\r\n    availableColumns: string[] = [\"company_id\", \"industry\", \"s1s2_emissions\", \"s3_emissions\", \"portfolio_weight\",\r\n        \"market_cap\", \"investment_value\", \"company_enterprise_value\", \"company_ev_plus_cash\", \"company_total_assets\",\r\n        \"target_reference_number\", \"scope\", \"base_year\", \"start_year\", \"target_year\", \"reduction_from_base_year\",\r\n        \"emissions_in_scope\", \"achieved_reduction\"];\r\n    selectedAggregationMethod: string = null;\r\n    filterTimeFrames: string[] = [];\r\n    filterScopeCategory: string[] = [];\r\n    includeColumns: string[] = [];\r\n    selectedDataProviders: string[] = [];\r\n    defaultScore: number = 3.2;\r\n    uploadedFiles: Array<File>;\r\n    dataProviders: DataProvider[];\r\n    portfolio: Object[] = [];\r\n    columns: string[] = [];\r\n    columnMapping: { [key: string]: string } = {};\r\n    resultColumns: string[] = [];\r\n    resultTargets: Object[] = [];\r\n    resultScores: { [key: string]: number } = {};\r\n    alerts: Alert[] = [];\r\n\r\n\r\n    constructor(private appService: AppService) { }\r\n\r\n    ngOnInit() {\r\n        this.appService.setAlertHandler(this.addAlert.bind(this))\r\n        this.getDataProviders();\r\n    }\r\n\r\n    addAlert(alert: Alert) {\r\n        this.alerts.push(alert);\r\n    }\r\n\r\n    close(alert: Alert) {\r\n        this.alerts.splice(this.alerts.indexOf(alert), 1);\r\n    }\r\n\r\n    fileChange(element) {\r\n        this.uploadedFiles = element.target.files;\r\n    }\r\n\r\n    getDataProviders(): void {\r\n        this.appService.getDataProviders()\r\n            .subscribe(dataProviders => this.dataProviders = dataProviders);\r\n    }\r\n\r\n    exportToCsv(filename: string, rows: Array<Array<any>>) {\r\n        /**\r\n         * Export some data (formatted as a 2d array) as a CSV file.\r\n         * @param filename \r\n         * @param row \r\n         */\r\n        var processRow = function (row) {\r\n            var finalVal = '';\r\n            for (var j = 0; j < row.length; j++) {\r\n                var innerValue = row[j] === null ? '' : row[j].toString();\r\n                if (row[j] instanceof Date) {\r\n                    innerValue = row[j].toLocaleString();\r\n                };\r\n                var result = innerValue.replace(/\"/g, '\"\"');\r\n                if (result.search(/(\"|,|\\n)/g) >= 0)\r\n                    result = '\"' + result + '\"';\r\n                if (j > 0)\r\n                    finalVal += ',';\r\n                finalVal += result;\r\n            }\r\n            return finalVal + '\\n';\r\n        };\r\n\r\n        var csvFile = '';\r\n        for (var i = 0; i < rows.length; i++) {\r\n            csvFile += processRow(rows[i]);\r\n        }\r\n\r\n        var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });\r\n        if (navigator.msSaveBlob) { // IE 10+\r\n            navigator.msSaveBlob(blob, filename);\r\n        } else {\r\n            var link = document.createElement(\"a\");\r\n            if (link.download !== undefined) { // feature detection\r\n                // Browsers that support HTML5 download attribute\r\n                var url = URL.createObjectURL(blob);\r\n                link.setAttribute(\"href\", url);\r\n                link.setAttribute(\"download\", filename);\r\n                link.style.visibility = 'hidden';\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                document.body.removeChild(link);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseExcel() {\r\n        let formData = new FormData();\r\n        formData.append(\"file\", this.uploadedFiles[0], this.uploadedFiles[0].name);\r\n        formData.append(\"skiprows\", this.excelSkiprows.toString());\r\n\r\n        this.appService.doParsePortfolio(formData).subscribe((response) => {\r\n            this.portfolio = response[\"portfolio\"];\r\n            if (this.portfolio.length > 0) {\r\n                this.columns = Object.keys(this.portfolio[0]);\r\n                this.columnMapping = this.columns.reduce(function (map, obj) {\r\n                    map[obj] = null;\r\n                    return map;\r\n                }, {});\r\n            }\r\n        })\r\n    }\r\n\r\n    exportCSV() {\r\n        let csv = this.resultTargets.map(row => Object.values(row));\r\n        csv.unshift(this.resultColumns);\r\n        this.exportToCsv(\"temperature_scores.csv\", csv);\r\n    }\r\n\r\n    onSubmit(f) {\r\n        let columnsToUse = Object.keys(this.columnMapping).filter((key) => this.columnMapping[key] !== null);\r\n        let portfolioData = this.portfolio.map((obj) => {\r\n            let newObj = {};\r\n            for (let column of columnsToUse) {\r\n                newObj[this.columnMapping[column]] = obj[column];\r\n            }\r\n            return newObj;\r\n        });\r\n        this.appService.getTemperatureScore({\r\n            \"aggregation_method\": this.selectedAggregationMethod,\r\n            \"data_providers\": this.selectedDataProviders,\r\n            \"filter_scope_category\": this.filterScopeCategory,\r\n            \"filter_time_frame\": this.filterTimeFrames,\r\n            \"include_columns\": this.includeColumns,\r\n            \"default_score\": this.defaultScore,\r\n            \"companies\": portfolioData,\r\n        })\r\n            .subscribe((response) => {\r\n                if (response !== undefined) { \r\n                    this.resultScores = response[\"aggregated_scores\"];\r\n                    this.resultTargets = response[\"companies\"];\r\n                    if (this.resultTargets.length > 0) {\r\n                        this.resultColumns = Object.keys(this.resultTargets[0]);\r\n                    }\r\n                }\r\n            })\r\n    }\r\n}\r\n","<style>\r\n    .container {\r\n        margin-top: 75px;\r\n    }\r\n\r\n    .container-results {\r\n        margin-top: 25px;\r\n        margin-bottom: 25px;\r\n    }\r\n\r\n    .table-results {\r\n        margin-top: 10px;\r\n    }\r\n</style>\r\n\r\n<!-- Toolbar -->\r\n<nav class=\"navbar navbar-expand-md navbar-dark bg-primary fixed-top\">\r\n    <a class=\"navbar-brand\" href=\"#\">SBTi</a>\r\n    <button class=\"navbar-toggler hidden-sm-up\" type=\"button\" (click)=\"isNavbarCollapsed = !isNavbarCollapsed\"\r\n        data-target=\"#navbarsDefault\" aria-controls=\"navbarsDefault\" aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\">\r\n        <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div [ngbCollapse]=\"isNavbarCollapsed\" class=\"collapse navbar-collapse\" id=\"navbarsDefault\">\r\n        <ul class=\"navbar-nav mr-auto\">\r\n            <li class=\"nav-item\">\r\n                <a class=\"nav-link\" id=\"nav-link-temperature-score\" href=\"#\">Temperature score</a>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n                <a class=\"nav-link\" id=\"nav-link-portfolio-coverage\" href=\"#\">Portfolio coverage</a>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</nav>\r\n\r\n<div class=\"container\" role=\"main\">\r\n    <h2>SBTi Temperature Scoring</h2>\r\n    <p *ngFor=\"let alert of alerts\">\r\n        <ngb-alert [type]=\"alert.type\" (close)=\"close(alert)\">{{ alert.message }}</ngb-alert>\r\n    </p>\r\n\r\n    <form>\r\n        <div class=\"form-group\">\r\n            <label for=\"input-excel_file\">Excel file</label>\r\n            <input (change)=\"fileChange($event)\" type=\"file\" class=\"form-control-file\" id=\"input-excel_file\"\r\n                name=\"input-excel_file\" aria-describedby=\"input-excel_file\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"input-excel_skiprows\">Skip rows</label>\r\n            <input type=\"number\" class=\"form-control\" id=\"input-excel_skiprows\" name=\"input-excel_skiprows\"\r\n                [(ngModel)]=\"excelSkiprows\">\r\n        </div>\r\n        <button class=\"btn btn-primary\" (click)=\"parseExcel()\">Parse Excel</button>\r\n        <hr />\r\n        <h6>Map your columns to input fields</h6>\r\n        <div class=\"row\" *ngIf=\"columns.length > 0\">\r\n            <div class=\"col\">\r\n                <p *ngFor=\"let column of columns\">\r\n                    <input class=\"form-control\" value=\"{{column}}\" disabled />\r\n                </p>\r\n            </div>\r\n            <div class=\"col\">\r\n                <p *ngFor=\"let column of columns\">\r\n                    <select class=\"form-control\" name=\"select-map_{{column}}\" [(ngModel)]=\"columnMapping[column]\">\r\n                        <option></option>\r\n                        <option *ngFor=\"let targetColumn of availableTargetColumns\">{{targetColumn}}</option>\r\n                    </select>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    </form>\r\n    <form (ngSubmit)=\"onSubmit(f)\" #f=\"ngForm\">\r\n        <hr />\r\n        <h6>API settings (leave empty to use the defaults)</h6>\r\n        <!-- TODO: Add the default score -->\r\n        <div class=\"form-group\">\r\n            <label for=\"input-defaultScore\">Default temperature score</label>\r\n            <input type=\"number\" class=\"form-control\" id=\"input-defaultScore\" step=\"0.1\" name=\"input-defaultScore\"\r\n                [(ngModel)]=\"defaultScore\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"input-aggregationMethod\">Aggregation method</label>\r\n            <select class=\"form-control\" [(ngModel)]=\"selectedAggregationMethod\" name=\"aggregationMethod\"\r\n                class=\"form-control\" id=\"input-aggregationMethod\">\r\n                <option *ngFor=\"let aggregationMethod of availableAggregationMethods\">{{aggregationMethod}}</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"input-filterTimeFrames\">Time frame</label>\r\n            <select [(ngModel)]=\"filterTimeFrames\" name=\"filterTimeFrames\" multiple class=\"form-control\"\r\n                id=\"input-filterTimeFrames\">\r\n                <option *ngFor=\"let timeFrame of availableTimeFrames\">{{timeFrame}}</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"input-filterScopeCategory\">Scope</label>\r\n            <select [(ngModel)]=\"filterScopeCategory\" name=\"filterScopeCategory\" multiple class=\"form-control\"\r\n                id=\"input-filterScopeCategory\">\r\n                <option *ngFor=\"let scopeCategory of availableScopeCategories\">{{scopeCategory}}</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"input-dataProviders\">Data provider(s)</label>\r\n            <select class=\"form-control\" id=\"input-dataProviders\" name=\"dataProviders\"\r\n                [(ngModel)]=\"selectedDataProviders\" multiple>\r\n                <option *ngFor=\"let dataProvider of dataProviders\">{{dataProvider.name}}</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"columns\">Columns</label>\r\n            <select class=\"form-control\" id=\"columns\" name=\"columns\" [(ngModel)]=\"includeColumns\" multiple>\r\n                <option *ngFor=\"let availableColumn of availableColumns\">{{availableColumn}}</option>\r\n            </select>\r\n        </div>\r\n\r\n        <button class=\"btn btn-success\">Get temperature score</button>\r\n    </form>\r\n\r\n    <div id=\"div-results\" class=\"container-results\" *ngIf=\"resultTargets.length > 0\">\r\n        <div class=\"row\" *ngIf=\"'short' in resultScores\">\r\n            <div class=\"col\">\r\n                <div class=\"card text-center\">\r\n                    <div class=\"card-header\">\r\n                        Short term\r\n                    </div>\r\n                    <div class=\"card-body\">\r\n                        <h5 class=\"card-title\">{{resultScores[\"short\"] | number:'1.2-2'}}&#176;C</h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"col\">\r\n                <div class=\"card text-center\">\r\n                    <div class=\"card-header\">\r\n                        Mid term\r\n                    </div>\r\n                    <div class=\"card-body\">\r\n                        <h5 class=\"card-title\">{{resultScores[\"mid\"] | number:'1.2-2'}}&#176;C</h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"col\">\r\n                <div class=\"card text-center\">\r\n                    <div class=\"card-header\">\r\n                        Long term\r\n                    </div>\r\n                    <div class=\"card-body\">\r\n                        <h5 class=\"card-title\">{{resultScores[\"long\"] | number:'1.2-2'}}&#176;C</h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"container-results\">\r\n            <h5>Temperature score targets <button class=\"btn btn-outline-primary\"\r\n                    (click)=\"exportCSV()\">Download</button></h5>\r\n            <table class=\"table table-striped\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\" *ngFor=\"let resultColumn of resultColumns\">{{resultColumn}}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr *ngFor=\"let target of resultTargets\">\r\n                        <td scope=\"row\" *ngFor=\"let resultColumn of resultColumns\">{{ target[resultColumn] }}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    </div>\r\n\r\n</div>\r\n\r\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule }    from '@angular/common/http';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    NgbModule,\r\n    HttpClientModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { environment } from './../environments/environment';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\n\r\nimport { DataProvider } from './dataProvider';\r\nimport { Portfolio } from './portfolio';\r\nimport { TemperatureScoreSettings } from './temperatureScoreSettings';\r\nimport { Alert } from './alert';\r\nimport { TemperatureScoreResult } from './temperatureScoreResult';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AppService {\r\n\r\n    httpOptions = {\r\n        headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n    };\r\n    alertHandler: (alert: Alert) => void;\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    addAlert(alert: Alert) {\r\n        console.log(alert);\r\n    }\r\n\r\n    setAlertHandler(addAlert: (alert: Alert) => void) {\r\n        this.addAlert = addAlert;\r\n    }\r\n\r\n    /** GET a list of available data providers */\r\n    public getDataProviders(): Observable<DataProvider[]> {\r\n        return this.http.get<DataProvider[]>(`${environment.host}/data_providers`)\r\n            .pipe(\r\n                tap(_ => console.log('fetched data providers')),\r\n                catchError(this.handleError<DataProvider[]>('getDataProviders', []))\r\n            );\r\n    }\r\n\r\n    public doParsePortfolio(data: FormData): Observable<Portfolio> {\r\n        return this.http.post<Portfolio>(`${environment.host}/parse_portfolio/`, data)\r\n            .pipe(\r\n                tap(_ => console.log('Parsed portfolio')),\r\n                catchError(this.handleError<Portfolio>('doParsePortfolio', {\"portfolio\": []}))\r\n            );\r\n    }\r\n\r\n    public getTemperatureScore(data: TemperatureScoreSettings): Observable<TemperatureScoreResult> {\r\n        return this.http.post<TemperatureScoreResult>(`${environment.host}/temperature_score/`, data)\r\n            .pipe(\r\n                tap(_ => console.log('Calculated temperature score')),\r\n                catchError(this.handleError<TemperatureScoreResult>('getTemperatureScore', {\"aggregated_scores\": {}, \"companies\": []}))\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Handle Http operation that failed.\r\n     * Let the app continue.\r\n     * @param operation - name of the operation that failed\r\n     * @param result - optional value to return as the observable result\r\n     */\r\n    private handleError<T>(operation = 'operation', result?: T) {\r\n        return (error: any): Observable<T> => {\r\n\r\n            if (error.status === 500) {\r\n                this.addAlert({type: \"warning\", message: \"There was a technical error. Please check your inputs.\"});\r\n            } else {\r\n                this.addAlert({type: \"danger\", message: \"Nn unknown error occured.\"});\r\n                console.error(error); // log to console instead\r\n            }\r\n\r\n            // Let the app keep running by returning an empty result.\r\n            return of(result as T);\r\n        };\r\n    }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  host: \"http://localhost:5000\"\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}