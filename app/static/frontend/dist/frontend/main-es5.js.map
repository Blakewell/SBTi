{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/app.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","appService","title","excelSkiprows","isNavbarCollapsed","availableTargetColumns","availableTimeFrames","availableScopeCategories","availableAggregationMethods","availableColumns","selectedAggregationMethod","filterTimeFrames","filterScopeCategory","includeColumns","selectedDataProviders","defaultScore","portfolio","columns","columnMapping","resultColumns","resultTargets","resultScores","alerts","setAlertHandler","addAlert","bind","getDataProviders","alert","push","splice","indexOf","element","uploadedFiles","target","files","subscribe","dataProviders","filename","rows","processRow","row","finalVal","j","length","innerValue","toString","Date","toLocaleString","result","replace","search","csvFile","i","blob","Blob","type","navigator","msSaveBlob","link","document","createElement","download","undefined","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","formData","FormData","append","name","doParsePortfolio","response","Object","reduce","map","obj","csv","values","unshift","exportToCsv","f","columnsToUse","filter","key","portfolioData","newObj","column","getTemperatureScore","fileChange","parseExcel","onSubmit","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","AppService","http","httpOptions","headers","console","log","get","host","pipe","_","handleError","data","post","operation","error","status","message","providedIn","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AppService } from './app.service';\r\nimport { DataProvider } from './dataProvider';\r\nimport { Alert } from './alert';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n    title = 'SBTi Temperature score';\r\n    excelSkiprows: number = 0;\r\n    isNavbarCollapsed: boolean = true;\r\n    availableTargetColumns: string[] = [\"company_id\", \"company_name\", \"portfolio_weight\", \"investment_value\"];\r\n    availableTimeFrames: string[] = [\"short\", \"mid\", \"long\"];\r\n    availableScopeCategories: string[] = [\"s1s2\", \"s3\", \"s1s2s3\"];\r\n    availableAggregationMethods: string[] = [\"WATS\", \"TETS\", \"MOTS\", \"EOTS\", \"ECOTS\", \"AOTS\"];\r\n    availableColumns: string[] = [\"company_id\", \"industry\", \"s1s2_emissions\", \"s3_emissions\", \"portfolio_weight\",\r\n        \"market_cap\", \"investment_value\", \"company_enterprise_value\", \"company_ev_plus_cash\", \"company_total_assets\",\r\n        \"target_reference_number\", \"scope\", \"base_year\", \"start_year\", \"target_year\", \"reduction_from_base_year\",\r\n        \"emissions_in_scope\", \"achieved_reduction\"];\r\n    selectedAggregationMethod: string = null;\r\n    filterTimeFrames: string[] = [];\r\n    filterScopeCategory: string[] = [];\r\n    includeColumns: string[] = [];\r\n    selectedDataProviders: string[] = [];\r\n    defaultScore: number = 3.2;\r\n    uploadedFiles: Array<File>;\r\n    dataProviders: DataProvider[];\r\n    portfolio: Object[] = [];\r\n    columns: string[] = [];\r\n    columnMapping: { [key: string]: string } = {};\r\n    resultColumns: string[] = [];\r\n    resultTargets: Object[] = [];\r\n    resultScores: { [key: string]: number } = {};\r\n    alerts: Alert[] = [];\r\n\r\n\r\n    constructor(private appService: AppService) { }\r\n\r\n    ngOnInit() {\r\n        this.appService.setAlertHandler(this.addAlert.bind(this))\r\n        this.getDataProviders();\r\n    }\r\n\r\n    addAlert(alert: Alert) {\r\n        this.alerts.push(alert);\r\n    }\r\n\r\n    close(alert: Alert) {\r\n        this.alerts.splice(this.alerts.indexOf(alert), 1);\r\n    }\r\n\r\n    fileChange(element) {\r\n        this.uploadedFiles = element.target.files;\r\n    }\r\n\r\n    getDataProviders(): void {\r\n        this.appService.getDataProviders()\r\n            .subscribe(dataProviders => this.dataProviders = dataProviders);\r\n    }\r\n\r\n    exportToCsv(filename: string, rows: Array<Array<any>>) {\r\n        /**\r\n         * Export some data (formatted as a 2d array) as a CSV file.\r\n         * @param filename \r\n         * @param row \r\n         */\r\n        var processRow = function (row) {\r\n            var finalVal = '';\r\n            for (var j = 0; j < row.length; j++) {\r\n                var innerValue = row[j] === null ? '' : row[j].toString();\r\n                if (row[j] instanceof Date) {\r\n                    innerValue = row[j].toLocaleString();\r\n                };\r\n                var result = innerValue.replace(/\"/g, '\"\"');\r\n                if (result.search(/(\"|,|\\n)/g) >= 0)\r\n                    result = '\"' + result + '\"';\r\n                if (j > 0)\r\n                    finalVal += ',';\r\n                finalVal += result;\r\n            }\r\n            return finalVal + '\\n';\r\n        };\r\n\r\n        var csvFile = '';\r\n        for (var i = 0; i < rows.length; i++) {\r\n            csvFile += processRow(rows[i]);\r\n        }\r\n\r\n        var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });\r\n        if (navigator.msSaveBlob) { // IE 10+\r\n            navigator.msSaveBlob(blob, filename);\r\n        } else {\r\n            var link = document.createElement(\"a\");\r\n            if (link.download !== undefined) { // feature detection\r\n                // Browsers that support HTML5 download attribute\r\n                var url = URL.createObjectURL(blob);\r\n                link.setAttribute(\"href\", url);\r\n                link.setAttribute(\"download\", filename);\r\n                link.style.visibility = 'hidden';\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                document.body.removeChild(link);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseExcel() {\r\n        let formData = new FormData();\r\n        formData.append(\"file\", this.uploadedFiles[0], this.uploadedFiles[0].name);\r\n        formData.append(\"skiprows\", this.excelSkiprows.toString());\r\n\r\n        this.appService.doParsePortfolio(formData).subscribe((response) => {\r\n            this.portfolio = response[\"portfolio\"];\r\n            if (this.portfolio.length > 0) {\r\n                this.columns = Object.keys(this.portfolio[0]);\r\n                this.columnMapping = this.columns.reduce(function (map, obj) {\r\n                    map[obj] = null;\r\n                    return map;\r\n                }, {});\r\n            }\r\n        })\r\n    }\r\n\r\n    exportCSV() {\r\n        let csv = this.resultTargets.map(row => Object.values(row));\r\n        csv.unshift(this.resultColumns);\r\n        this.exportToCsv(\"temperature_scores.csv\", csv);\r\n    }\r\n\r\n    onSubmit(f) {\r\n        let columnsToUse = Object.keys(this.columnMapping).filter((key) => this.columnMapping[key] !== null);\r\n        let portfolioData = this.portfolio.map((obj) => {\r\n            let newObj = {};\r\n            for (let column of columnsToUse) {\r\n                newObj[this.columnMapping[column]] = obj[column];\r\n            }\r\n            return newObj;\r\n        });\r\n        this.appService.getTemperatureScore({\r\n            \"aggregation_method\": this.selectedAggregationMethod,\r\n            \"data_providers\": this.selectedDataProviders,\r\n            \"filter_scope_category\": this.filterScopeCategory,\r\n            \"filter_time_frame\": this.filterTimeFrames,\r\n            \"include_columns\": this.includeColumns,\r\n            \"default_score\": this.defaultScore,\r\n            \"companies\": portfolioData,\r\n        })\r\n            .subscribe((response) => {\r\n                if (response !== undefined) { \r\n                    this.resultScores = response[\"aggregated_scores\"];\r\n                    this.resultTargets = response[\"companies\"];\r\n                    if (this.resultTargets.length > 0) {\r\n                        this.resultColumns = Object.keys(this.resultTargets[0]);\r\n                    }\r\n                }\r\n            })\r\n    }\r\n}\r\n","<style>\r\n    .container {\r\n        margin-top: 75px;\r\n    }\r\n\r\n    .container-results {\r\n        margin-top: 25px;\r\n        margin-bottom: 25px;\r\n    }\r\n\r\n    .table-results {\r\n        margin-top: 10px;\r\n    }\r\n</style>\r\n\r\n<!-- Toolbar -->\r\n<nav class=\"navbar navbar-expand-md navbar-dark bg-primary fixed-top\">\r\n    <a class=\"navbar-brand\" href=\"#\">SBTi</a>\r\n    <button class=\"navbar-toggler hidden-sm-up\" type=\"button\" (click)=\"isNavbarCollapsed = !isNavbarCollapsed\"\r\n        data-target=\"#navbarsDefault\" aria-controls=\"navbarsDefault\" aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\">\r\n        <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div [ngbCollapse]=\"isNavbarCollapsed\" class=\"collapse navbar-collapse\" id=\"navbarsDefault\">\r\n        <ul class=\"navbar-nav mr-auto\">\r\n            <li class=\"nav-item\">\r\n                <a class=\"nav-link\" id=\"nav-link-temperature-score\" href=\"#\">Temperature score</a>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n                <a class=\"nav-link\" id=\"nav-link-portfolio-coverage\" href=\"#\">Portfolio coverage</a>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</nav>\r\n\r\n<div class=\"container\" role=\"main\">\r\n    <h2>SBTi Temperature Scoring</h2>\r\n    <p *ngFor=\"let alert of alerts\">\r\n        <ngb-alert [type]=\"alert.type\" (close)=\"close(alert)\">{{ alert.message }}</ngb-alert>\r\n    </p>\r\n\r\n    <form>\r\n        <div class=\"form-group\">\r\n            <label for=\"input-excel_file\">Excel file</label>\r\n            <input (change)=\"fileChange($event)\" type=\"file\" class=\"form-control-file\" id=\"input-excel_file\"\r\n                name=\"input-excel_file\" aria-describedby=\"input-excel_file\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"input-excel_skiprows\">Skip rows</label>\r\n            <input type=\"number\" class=\"form-control\" id=\"input-excel_skiprows\" name=\"input-excel_skiprows\"\r\n                [(ngModel)]=\"excelSkiprows\">\r\n        </div>\r\n        <button class=\"btn btn-primary\" (click)=\"parseExcel()\">Parse Excel</button>\r\n        <hr />\r\n        <h6>Map your columns to input fields</h6>\r\n        <div class=\"row\" *ngIf=\"columns.length > 0\">\r\n            <div class=\"col\">\r\n                <p *ngFor=\"let column of columns\">\r\n                    <input class=\"form-control\" value=\"{{column}}\" disabled />\r\n                </p>\r\n            </div>\r\n            <div class=\"col\">\r\n                <p *ngFor=\"let column of columns\">\r\n                    <select class=\"form-control\" name=\"select-map_{{column}}\" [(ngModel)]=\"columnMapping[column]\">\r\n                        <option></option>\r\n                        <option *ngFor=\"let targetColumn of availableTargetColumns\">{{targetColumn}}</option>\r\n                    </select>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    </form>\r\n    <form (ngSubmit)=\"onSubmit(f)\" #f=\"ngForm\">\r\n        <hr />\r\n        <h6>API settings (leave empty to use the defaults)</h6>\r\n        <!-- TODO: Add the default score -->\r\n        <div class=\"form-group\">\r\n            <label for=\"input-defaultScore\">Default temperature score</label>\r\n            <input type=\"number\" class=\"form-control\" id=\"input-defaultScore\" step=\"0.1\" name=\"input-defaultScore\"\r\n                [(ngModel)]=\"defaultScore\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"input-aggregationMethod\">Aggregation method</label>\r\n            <select class=\"form-control\" [(ngModel)]=\"selectedAggregationMethod\" name=\"aggregationMethod\"\r\n                class=\"form-control\" id=\"input-aggregationMethod\">\r\n                <option *ngFor=\"let aggregationMethod of availableAggregationMethods\">{{aggregationMethod}}</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"input-filterTimeFrames\">Time frame</label>\r\n            <select [(ngModel)]=\"filterTimeFrames\" name=\"filterTimeFrames\" multiple class=\"form-control\"\r\n                id=\"input-filterTimeFrames\">\r\n                <option *ngFor=\"let timeFrame of availableTimeFrames\">{{timeFrame}}</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"input-filterScopeCategory\">Scope</label>\r\n            <select [(ngModel)]=\"filterScopeCategory\" name=\"filterScopeCategory\" multiple class=\"form-control\"\r\n                id=\"input-filterScopeCategory\">\r\n                <option *ngFor=\"let scopeCategory of availableScopeCategories\">{{scopeCategory}}</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"input-dataProviders\">Data provider(s)</label>\r\n            <select class=\"form-control\" id=\"input-dataProviders\" name=\"dataProviders\"\r\n                [(ngModel)]=\"selectedDataProviders\" multiple>\r\n                <option *ngFor=\"let dataProvider of dataProviders\">{{dataProvider.name}}</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"columns\">Columns</label>\r\n            <select class=\"form-control\" id=\"columns\" name=\"columns\" [(ngModel)]=\"includeColumns\" multiple>\r\n                <option *ngFor=\"let availableColumn of availableColumns\">{{availableColumn}}</option>\r\n            </select>\r\n        </div>\r\n\r\n        <button class=\"btn btn-success\">Get temperature score</button>\r\n    </form>\r\n\r\n    <div id=\"div-results\" class=\"container-results\" *ngIf=\"resultTargets.length > 0\">\r\n        <div class=\"row\" *ngIf=\"'short' in resultScores\">\r\n            <div class=\"col\">\r\n                <div class=\"card text-center\">\r\n                    <div class=\"card-header\">\r\n                        Short term\r\n                    </div>\r\n                    <div class=\"card-body\">\r\n                        <h5 class=\"card-title\">{{resultScores[\"short\"] | number:'1.2-2'}}&#176;C</h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"col\">\r\n                <div class=\"card text-center\">\r\n                    <div class=\"card-header\">\r\n                        Mid term\r\n                    </div>\r\n                    <div class=\"card-body\">\r\n                        <h5 class=\"card-title\">{{resultScores[\"mid\"] | number:'1.2-2'}}&#176;C</h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"col\">\r\n                <div class=\"card text-center\">\r\n                    <div class=\"card-header\">\r\n                        Long term\r\n                    </div>\r\n                    <div class=\"card-body\">\r\n                        <h5 class=\"card-title\">{{resultScores[\"long\"] | number:'1.2-2'}}&#176;C</h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"container-results\">\r\n            <h5>Temperature score targets <button class=\"btn btn-outline-primary\"\r\n                    (click)=\"exportCSV()\">Download</button></h5>\r\n            <table class=\"table table-striped\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\" *ngFor=\"let resultColumn of resultColumns\">{{resultColumn}}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr *ngFor=\"let target of resultTargets\">\r\n                        <td scope=\"row\" *ngFor=\"let resultColumn of resultColumns\">{{ target[resultColumn] }}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    </div>\r\n\r\n</div>\r\n\r\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule }    from '@angular/common/http';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    NgbModule,\r\n    HttpClientModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { environment } from './../environments/environment';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\n\r\nimport { DataProvider } from './dataProvider';\r\nimport { Portfolio } from './portfolio';\r\nimport { TemperatureScoreSettings } from './temperatureScoreSettings';\r\nimport { Alert } from './alert';\r\nimport { TemperatureScoreResult } from './temperatureScoreResult';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AppService {\r\n\r\n    httpOptions = {\r\n        headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n    };\r\n    alertHandler: (alert: Alert) => void;\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    addAlert(alert: Alert) {\r\n        console.log(alert);\r\n    }\r\n\r\n    setAlertHandler(addAlert: (alert: Alert) => void) {\r\n        this.addAlert = addAlert;\r\n    }\r\n\r\n    /** GET a list of available data providers */\r\n    public getDataProviders(): Observable<DataProvider[]> {\r\n        return this.http.get<DataProvider[]>(`${environment.host}/data_providers`)\r\n            .pipe(\r\n                tap(_ => console.log('fetched data providers')),\r\n                catchError(this.handleError<DataProvider[]>('getDataProviders', []))\r\n            );\r\n    }\r\n\r\n    public doParsePortfolio(data: FormData): Observable<Portfolio> {\r\n        return this.http.post<Portfolio>(`${environment.host}/parse_portfolio/`, data)\r\n            .pipe(\r\n                tap(_ => console.log('Parsed portfolio')),\r\n                catchError(this.handleError<Portfolio>('doParsePortfolio', {\"portfolio\": []}))\r\n            );\r\n    }\r\n\r\n    public getTemperatureScore(data: TemperatureScoreSettings): Observable<TemperatureScoreResult> {\r\n        return this.http.post<TemperatureScoreResult>(`${environment.host}/temperature_score/`, data)\r\n            .pipe(\r\n                tap(_ => console.log('Calculated temperature score')),\r\n                catchError(this.handleError<TemperatureScoreResult>('getTemperatureScore', {\"aggregated_scores\": {}, \"companies\": []}))\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Handle Http operation that failed.\r\n     * Let the app continue.\r\n     * @param operation - name of the operation that failed\r\n     * @param result - optional value to return as the observable result\r\n     */\r\n    private handleError<T>(operation = 'operation', result?: T) {\r\n        return (error: any): Observable<T> => {\r\n\r\n            if (error.status === 500) {\r\n                this.addAlert({type: \"warning\", message: \"There was a technical error. Please check your inputs.\"});\r\n            } else {\r\n                this.addAlert({type: \"danger\", message: \"Nn unknown error occured.\"});\r\n                console.error(error); // log to console instead\r\n            }\r\n\r\n            // Let the app keep running by returning an empty result.\r\n            return of(result as T);\r\n        };\r\n    }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  host: \"http://localhost:5000\"\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}